{"version":3,"sources":["smart-table.min.js"],"names":["ng","undefined","module","run","$templateCache","put","constant","pagination","template","itemsByPage","displayedPages","search","delay","inputEvent","select","mode","selectedClass","sort","ascentClass","descentClass","descendingFirst","skipNatural","pipe","tree","nodesInitiallyOpen","controller","$scope","$parse","$filter","$attrs","stConfig","copyRefs","src","copy","concat","isTreeTable","treeifyData","updateSafeCopy","safeCopy","safeGetter","pipeAfterSafeCopy","ctrl","deepDelete","object","path","indexOf","partials","split","key","pop","parentPath","join","parentObject","Object","keys","length","data","findTreeAncestors","datum","idx","ancestors","i","treeLevel","push","$$treeId","ancestorSet","$$treeDescendents","$$treeAncestors","forEach","d","toString","Math","floor","random","hasOwnProperty","$$treeIsExpanded","initiallyOpen","$$treeShown","k","nodeExpanded","checkDescendentVisibility","descIdx","shown","ancId","filtered","lastSelected","propertyName","stTable","displayGetter","displaySetter","assign","orderBy","filter","tableState","start","totalItemCount","this","Boolean","JSON","parse","stTreeInitOpen","toLowerCase","stSafeSrc","$watch","safeSrc","newValue","oldValue","sortBy","predicate","reverse","isFunction","functionName","name","input","predicateObject","prop","isString","trim","output","number","numberOfPages","ceil","slice","parseInt","row","rows","index","isSelected","getFilteredCollection","setFilterFunction","filterName","setSortFunction","sortFunctionName","preventPipeOnWatch","toggleRow","treeId","treeIdx","$apply","checkExpanded","directive","restrict","link","scope","element","attr","stSetFilter","stSetSort","$timeout","require","tableCtrl","promise","throttle","stDelay","event","stInputEvent","$observe","value","predicateExpression","stSearch","bind","evt","originalEvent","cancel","target","onSelect","stSelectMode","stOnSelect","addClass","removeClass","func","getter","isArray","stSort","sortDefault","classAscent","stClassAscent","classDescent","stClassDescent","stateClasses","stSkipNatural","stDescendingFirst","stSortDefault","$eval","stItemsByPage","stDisplayedPages","stPageChange","templateUrl","attrs","stTemplate","redraw","end","paginationState","prevPage","currentPage","max","abs","pages","numPages","newPage","selectPage","page","config","stPipe","pre","pipePromise","post","priority","compile","tElement","tAttrs","repeat","ngRepeat","rptVar","caretEl","angular","find","toggleExists","toggleIsExpanded","toggleLevel","stTreeId","stTreeLevel","stTreeIndex","$event","stopPropagation","spacerClass"],"mappings":"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","file":"smart-table.min.js","sourcesContent":["(function (ng, undefined){\n    'use strict';\n\nng.module('smart-table', []).run(['$templateCache', function ($templateCache) {\n    $templateCache.put('template/smart-table/pagination.html',\n        '<nav ng-if=\"numPages && pages.length >= 2\"><ul class=\"pagination\">' +\n        '<li ng-repeat=\"page in pages\" ng-class=\"{active: page==currentPage}\"><a href=\"javascript: void(0);\" ng-click=\"selectPage(page)\">{{page}}</a></li>' +\n        '</ul></nav>');\n        \n    $templateCache.put('sttable/template/st-tree-toggle.html',\n        '<span ng-class=\"spacerClass\"></span><i ng-if=\"toggleExists\" ng-class=\"toggleIsExpanded ? \\'fa fa-caret-down\\' : \\'fa fa-caret-right\\'\"></i>\\n' +\n        '');\n}]);\n\nng.module('smart-table')\n  .constant('stConfig', {\n    pagination: {\n      template: 'template/smart-table/pagination.html',\n      itemsByPage: 10,\n      displayedPages: 5\n    },\n    search: {\n      delay: 400, // ms\n      inputEvent: 'input'\n    },\n    select: {\n      mode: 'single',\n      selectedClass: 'st-selected'\n    },\n    sort: {\n      ascentClass: 'st-sort-ascent',\n      descentClass: 'st-sort-descent',\n      descendingFirst: false,\n      skipNatural: false,\n      delay:300\n    },\n    pipe: {\n      delay: 100 //ms\n    },\n    tree: {\n      nodesInitiallyOpen: true\n    }\n  });\n\nng.module('smart-table')\n  .controller('stTableController', ['$scope', '$parse', '$filter', '$attrs', 'stConfig', function StTableController ($scope, $parse, $filter, $attrs, stConfig) {\n    var propertyName = $attrs.stTable;\n    var displayGetter = $parse(propertyName);\n    var displaySetter = displayGetter.assign;\n    var safeGetter;\n    var orderBy = $filter('orderBy');\n    var filter = $filter('filter');\n    var safeCopy = copyRefs(displayGetter($scope));\n    var tableState = {\n      sort: {},\n      search: {},\n      pagination: {\n        start: 0,\n        totalItemCount: 0\n      }\n    };\n    var filtered;\n    var pipeAfterSafeCopy = true;\n    var ctrl = this;\n    var lastSelected;\n    var isTreeTable = 'stTreeTable' in $attrs;\n    var nodeExpanded = {};\n    //TODO allow passing an object with different levels open or closed?\n    var initiallyOpen = 'stTreeInitOpen' in $attrs ? Boolean(JSON.parse($attrs.stTreeInitOpen.toLowerCase())) : stConfig.tree.nodesInitiallyOpen;\n    \n    function copyRefs (src) {\n      var copy = src ? [].concat(src) : [];\n      if (isTreeTable) {\n        treeifyData(copy);\n      }\n      return copy;\n    }\n\n    function updateSafeCopy () {\n      safeCopy = copyRefs(safeGetter($scope));\n      if (pipeAfterSafeCopy === true) {\n        ctrl.pipe();\n      }\n    }\n\n    function deepDelete (object, path) {\n      if (path.indexOf('.') != -1) {\n        var partials = path.split('.');\n        var key = partials.pop();\n        var parentPath = partials.join('.');\n        var parentObject = $parse(parentPath)(object);\n        delete parentObject[key];\n        if (Object.keys(parentObject).length === 0) {\n          deepDelete(object, parentPath);\n        }\n      } else {\n        delete object[path];\n      }\n    }\n    \n    function treeifyData(data) {\n      data.forEach(function(d, i) {\n        if (!d.$$treeId) d.$$treeId = d.treeLevel.toString() + i + Math.floor(Math.random()*10000);\n      });\n      var ancestorSet = {};\n      data.forEach(function(d, i) {\n        if (d.treeLevel > 0) {\n          d.$$treeDescendents = [];\n          if (!d.hasOwnProperty('$$treeIsExpanded')) d.$$treeIsExpanded = initiallyOpen;\n        }\n        d.$$treeAncestors = findTreeAncestors(d, i);\n        d.$$treeShown = d.treeLevel > 0;\n      });\n      \n      Object.keys(ancestorSet).forEach(function(k) {\n        if (!nodeExpanded.hasOwnProperty(k)) nodeExpanded[k] = initiallyOpen;\n      });\n      \n      data.forEach(function(d, i) {\n        if (d.treeLevel > 0) checkDescendentVisibility(data, i);\n      });\n      \n      function findTreeAncestors(datum, idx) {\n        var ancestors = [];\n        for (var i = idx; i >= 0; i--) {\n          if (data[i].treeLevel > datum.treeLevel) {\n            ancestors.push(data[i].$$treeId);\n            ancestorSet[data[i].$$treeId] = true;\n            data[i].$$treeDescendents.push(idx);\n            return ancestors.concat(data[i].$$treeAncestors);\n          }\n        }\n        return ancestors;\n      }\n    }\n    \n    function checkDescendentVisibility(data, idx) {\n      data[idx].$$treeDescendents.forEach(function(descIdx) {\n        var shown = true;\n        data[descIdx].$$treeAncestors.forEach(function(ancId) {\n          shown = shown && nodeExpanded[ancId];\n        });\n        data[descIdx].$$treeShown = shown;\n        if (data[descIdx].$$treeDescendents) {\n          checkDescendentVisibility(data, descIdx);\n        }\n      });\n    }\n\n    if ($attrs.stSafeSrc) {\n      safeGetter = $parse($attrs.stSafeSrc);\n      $scope.$watch(function () {\n        var safeSrc = safeGetter($scope);\n        return safeSrc && safeSrc.length ? safeSrc[0] : undefined;\n      }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n          updateSafeCopy();\n        }\n      });\n      $scope.$watch(function () {\n        var safeSrc = safeGetter($scope);\n        return safeSrc ? safeSrc.length : 0;\n      }, function (newValue, oldValue) {\n        if (newValue !== safeCopy.length) {\n          updateSafeCopy();\n        }\n      });\n      $scope.$watch(function () {\n        return safeGetter($scope);\n      }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n          tableState.pagination.start = 0;\n          updateSafeCopy();\n        }\n      });\n    }\n\n    /**\n     * sort the rows\n     * @param {Function | String} predicate - function or string which will be used as predicate for the sorting\n     * @param [reverse] - if you want to reverse the order\n     */\n    this.sortBy = function sortBy (predicate, reverse) {\n      tableState.sort.predicate = predicate;\n      tableState.sort.reverse = reverse === true;\n\n      if (ng.isFunction(predicate)) {\n        tableState.sort.functionName = predicate.name;\n      } else {\n        delete tableState.sort.functionName;\n      }\n\n      tableState.pagination.start = 0;\n      return this.pipe();\n    };\n\n    /**\n     * search matching rows\n     * @param {String} input - the input string\n     * @param {String} [predicate] - the property name against you want to check the match, otherwise it will search on all properties\n     */\n    this.search = function search (input, predicate) {\n      var predicateObject = tableState.search.predicateObject || {};\n      var prop = predicate ? predicate : '$';\n\n      input = ng.isString(input) ? input.trim() : input;\n      $parse(prop).assign(predicateObject, input);\n      // to avoid to filter out null value\n      if (!input) {\n        deepDelete(predicateObject, prop);\n      }\n      tableState.search.predicateObject = predicateObject;\n      tableState.pagination.start = 0;\n      return this.pipe();\n    };\n\n    /**\n     * this will chain the operations of sorting and filtering based on the current table state (sort options, filtering, ect)\n     */\n    this.pipe = function pipe () {\n      var pagination = tableState.pagination;\n      var output;\n      filtered = tableState.search.predicateObject ? filter(safeCopy, tableState.search.predicateObject) : safeCopy;\n      if (tableState.sort.predicate) {\n        filtered = orderBy(filtered, tableState.sort.predicate, tableState.sort.reverse);\n      }\n      pagination.totalItemCount = filtered.length;\n      if (pagination.number !== undefined) {\n        pagination.numberOfPages = filtered.length > 0 ? Math.ceil(filtered.length / pagination.number) : 1;\n        pagination.start = pagination.start >= filtered.length ? (pagination.numberOfPages - 1) * pagination.number : pagination.start;\n        output = filtered.slice(pagination.start, pagination.start + parseInt(pagination.number));\n      }\n      displaySetter($scope, output || filtered);\n    };\n\n    /**\n     * select a dataRow (it will add the attribute isSelected to the row object)\n     * @param {Object} row - the row to select\n     * @param {String} [mode] - \"single\" or \"multiple\" (multiple by default)\n     */\n    this.select = function select (row, mode) {\n      var rows = copyRefs(displayGetter($scope));\n      var index = rows.indexOf(row);\n      if (index !== -1) {\n        if (mode === 'single') {\n          row.isSelected = row.isSelected !== true;\n          if (lastSelected) {\n            lastSelected.isSelected = false;\n          }\n          lastSelected = row.isSelected === true ? row : undefined;\n        } else {\n          rows[index].isSelected = !rows[index].isSelected;\n        }\n      }\n    };\n\n    /**\n     * take a slice of the current sorted/filtered collection (pagination)\n     *\n     * @param {Number} start - start index of the slice\n     * @param {Number} number - the number of item in the slice\n     */\n    this.slice = function splice (start, number) {\n      tableState.pagination.start = start;\n      tableState.pagination.number = number;\n      return this.pipe();\n    };\n\n    /**\n     * return the current state of the table\n     * @returns {{sort: {}, search: {}, pagination: {start: number}}}\n     */\n    this.tableState = function getTableState () {\n      return tableState;\n    };\n\n    this.getFilteredCollection = function getFilteredCollection () {\n      return filtered || safeCopy;\n    };\n\n    /**\n     * Use a different filter function than the angular FilterFilter\n     * @param filterName the name under which the custom filter is registered\n     */\n    this.setFilterFunction = function setFilterFunction (filterName) {\n      filter = $filter(filterName);\n    };\n\n    /**\n     * Use a different function than the angular orderBy\n     * @param sortFunctionName the name under which the custom order function is registered\n     */\n    this.setSortFunction = function setSortFunction (sortFunctionName) {\n      orderBy = $filter(sortFunctionName);\n    };\n\n    /**\n     * Usually when the safe copy is updated the pipe function is called.\n     * Calling this method will prevent it, which is something required when using a custom pipe function\n     */\n    this.preventPipeOnWatch = function preventPipe () {\n      pipeAfterSafeCopy = false;\n    };\n    \n    /**\n     * Open or close a tree level.\n     * @param treeId the unique id of the tree table row being toggled\n     * @param treeIdx the index of the row in the table\n     */\n    this.toggleRow = function toggleRow (treeId, treeIdx) {\n      nodeExpanded[treeId] = !nodeExpanded[treeId];\n      safeCopy[treeIdx].$$treeIsExpanded = nodeExpanded[treeId];\n      $scope.$apply(function() {\n        checkDescendentVisibility(safeCopy, treeIdx);\n      });\n    };\n    \n    /**\n     * Check if a tree level is open or closed\n     * @param treeId the unique id of the tree table row being checked\n     */\n    this.checkExpanded = function checkExpanded (treeId) {\n      return nodeExpanded[treeId];\n    };\n  }])\n  .directive('stTable', function () {\n    return {\n      restrict: 'A',\n      controller: 'stTableController',\n      link: function (scope, element, attr, ctrl) {\n\n        if (attr.stSetFilter) {\n          ctrl.setFilterFunction(attr.stSetFilter);\n        }\n\n        if (attr.stSetSort) {\n          ctrl.setSortFunction(attr.stSetSort);\n        }\n      }\n    };\n  });\n\nng.module('smart-table')\n  .directive('stSearch', ['stConfig', '$timeout','$parse', function (stConfig, $timeout, $parse) {\n    return {\n      require: '^stTable',\n      link: function (scope, element, attr, ctrl) {\n        var tableCtrl = ctrl;\n        var promise = null;\n        var throttle = attr.stDelay || stConfig.search.delay;\n        var event = attr.stInputEvent || stConfig.search.inputEvent;\n\n        attr.$observe('stSearch', function (newValue, oldValue) {\n          var input = element[0].value;\n          if (newValue !== oldValue && input) {\n            ctrl.tableState().search = {};\n            tableCtrl.search(input, newValue);\n          }\n        });\n\n        //table state -> view\n        scope.$watch(function () {\n          return ctrl.tableState().search;\n        }, function (newValue, oldValue) {\n          var predicateExpression = attr.stSearch || '$';\n          if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {\n            element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';\n          }\n        }, true);\n\n        // view -> table state\n        element.bind(event, function (evt) {\n          evt = evt.originalEvent || evt;\n          if (promise !== null) {\n            $timeout.cancel(promise);\n          }\n\n          promise = $timeout(function () {\n            tableCtrl.search(evt.target.value, attr.stSearch || '');\n            promise = null;\n          }, throttle);\n        });\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stSelectRow', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      scope: {\n        row: '=stSelectRow',\n        onSelect: '=?stOnSelect'\n      },\n      link: function (scope, element, attr, ctrl) {\n        var mode = attr.stSelectMode || stConfig.select.mode;\n        element.bind('click', function () {\n          scope.$apply(function () {\n            ctrl.select(scope.row, mode);\n            if (attr.stOnSelect) scope.onSelect(scope.row);\n          });\n        });\n\n        scope.$watch('row.isSelected', function (newValue) {\n          if (newValue === true) {\n            element.addClass(stConfig.select.selectedClass);\n          } else {\n            element.removeClass(stConfig.select.selectedClass);\n          }\n        });\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stSort', ['stConfig', '$parse', '$timeout', function (stConfig, $parse, $timeout) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      link: function (scope, element, attr, ctrl) {\n\n        var predicate = attr.stSort;\n        var getter = $parse(predicate);\n        var index = 0;\n        var classAscent = attr.stClassAscent || stConfig.sort.ascentClass;\n        var classDescent = attr.stClassDescent || stConfig.sort.descentClass;\n        var stateClasses = [classAscent, classDescent];\n        var sortDefault;\n        var skipNatural = attr.stSkipNatural !== undefined ? attr.stSkipNatural : stConfig.sort.skipNatural;\n        var descendingFirst = attr.stDescendingFirst !== undefined ? attr.stDescendingFirst : stConfig.sort.descendingFirst;\n        var promise = null;\n        var throttle = attr.stDelay || stConfig.sort.delay;\n\n        if (attr.stSortDefault) {\n          sortDefault = scope.$eval(attr.stSortDefault) !== undefined ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;\n        }\n\n        //view --> table state\n        function sort () {\n          if (descendingFirst) {\n            index = index === 0 ? 2 : index - 1;\n          } else {\n            index++;\n          }\n\n          var func;\n          predicate = ng.isFunction(getter(scope)) || ng.isArray(getter(scope)) ? getter(scope) : attr.stSort;\n          if (index % 3 === 0 && !!skipNatural !== true) {\n            //manual reset\n            index = 0;\n            ctrl.tableState().sort = {};\n            ctrl.tableState().pagination.start = 0;\n            func = ctrl.pipe.bind(ctrl);\n          } else {\n            func = ctrl.sortBy.bind(ctrl, predicate, index % 2 === 0);\n          }\n          if (promise !== null) {\n            $timeout.cancel(promise);\n          }\n          if (throttle < 0) {\n            func();\n          } else {\n            promise = $timeout(func, throttle);\n          }\n        }\n\n        element.bind('click', function sortClick () {\n          if (predicate) {\n            scope.$apply(sort);\n          }\n        });\n\n        if (sortDefault) {\n          index = sortDefault === 'reverse' ? 1 : 0;\n          sort();\n        }\n\n        //table state --> view\n        scope.$watch(function () {\n          return ctrl.tableState().sort;\n        }, function (newValue) {\n          if (newValue.predicate !== predicate) {\n            index = 0;\n            element\n              .removeClass(classAscent)\n              .removeClass(classDescent);\n          } else {\n            index = newValue.reverse === true ? 2 : 1;\n            element\n              .removeClass(stateClasses[index % 2])\n              .addClass(stateClasses[index - 1]);\n          }\n        }, true);\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stPagination', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'EA',\n      require: '^stTable',\n      scope: {\n        stItemsByPage: '=?',\n        stDisplayedPages: '=?',\n        stPageChange: '&'\n      },\n      templateUrl: function (element, attrs) {\n        if (attrs.stTemplate) {\n          return attrs.stTemplate;\n        }\n        return stConfig.pagination.template;\n      },\n      link: function (scope, element, attrs, ctrl) {\n\n        scope.stItemsByPage = scope.stItemsByPage ? +(scope.stItemsByPage) : stConfig.pagination.itemsByPage;\n        scope.stDisplayedPages = scope.stDisplayedPages ? +(scope.stDisplayedPages) : stConfig.pagination.displayedPages;\n\n        scope.currentPage = 1;\n        scope.pages = [];\n\n        function redraw () {\n          var paginationState = ctrl.tableState().pagination;\n          var start = 1;\n          var end;\n          var i;\n          var prevPage = scope.currentPage;\n          scope.totalItemCount = paginationState.totalItemCount;\n          scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;\n\n          start = Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));\n          end = start + scope.stDisplayedPages;\n\n          if (end > paginationState.numberOfPages) {\n            end = paginationState.numberOfPages + 1;\n            start = Math.max(1, end - scope.stDisplayedPages);\n          }\n\n          scope.pages = [];\n          scope.numPages = paginationState.numberOfPages;\n\n          for (i = start; i < end; i++) {\n            scope.pages.push(i);\n          }\n\n          if (prevPage !== scope.currentPage) {\n            scope.stPageChange({newPage: scope.currentPage});\n          }\n        }\n\n        //table state --> view\n        scope.$watch(function () {\n          return ctrl.tableState().pagination;\n        }, redraw, true);\n\n        //scope --> table state  (--> view)\n        scope.$watch('stItemsByPage', function (newValue, oldValue) {\n          if (newValue !== oldValue) {\n            scope.selectPage(1);\n          }\n        });\n\n        scope.$watch('stDisplayedPages', redraw);\n\n        //view -> table state\n        scope.selectPage = function (page) {\n          if (page > 0 && page <= scope.numPages) {\n            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);\n          }\n        };\n\n        if (!ctrl.tableState().pagination.number) {\n          ctrl.slice(0, scope.stItemsByPage);\n        }\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stPipe', ['stConfig', '$timeout', function (config, $timeout) {\n    return {\n      require: 'stTable',\n      scope: {\n        stPipe: '='\n      },\n      link: {\n\n        pre: function (scope, element, attrs, ctrl) {\n\n          var pipePromise = null;\n\n          if (ng.isFunction(scope.stPipe)) {\n            ctrl.preventPipeOnWatch();\n            ctrl.pipe = function () {\n\n              if (pipePromise !== null) {\n                $timeout.cancel(pipePromise)\n              }\n\n              pipePromise = $timeout(function () {\n                scope.stPipe(ctrl.tableState(), ctrl);\n              }, config.pipe.delay);\n\n              return pipePromise;\n            }\n          }\n        },\n\n        post: function (scope, element, attrs, ctrl) {\n          ctrl.pipe();\n        }\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stTreeRow', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      priority: 1001, // needs to compile before ng-repeat at priority 1000\n      compile: function (tElement, tAttrs) {\n        // add tree attributes\n        var repeat = tAttrs.ngRepeat;\n        var rptVar = repeat.split(' in ')[0];\n        tElement.attr('ng-repeat', repeat + ' track by ' + rptVar + '.$$treeId');\n        tElement.attr('ng-if', rptVar + '.$$treeShown');\n        tElement.attr('ng-class', '\"st-tree-row-\"+' + rptVar + '.treeLevel');\n            \n        var caretEl = angular.element(tElement.find('td')[0]).find('st-tree-caret');\n        caretEl.attr('toggle-exists', rptVar + '.treeLevel > 0');\n        caretEl.attr('toggle-is-expanded', rptVar + '.$$treeIsExpanded');\n        caretEl.attr('toggle-level', rptVar + '.treeLevel');\n        caretEl.attr('st-tree-id', rptVar + '.$$treeId');\n        caretEl.attr('st-tree-level', rptVar + '.treeLevel');\n        caretEl.attr('st-tree-index', '$index');\n      }\n    };\n  }]);\n  \nng.module('smart-table')\n  .directive('stTreeCaret', ['stConfig', function (stConfig) {\n    return {\n      require: '^^stTable',\n      scope: {\n        toggleExists: '<',\n        toggleIsExpanded: '<',\n        toggleLevel: '<',\n        stTreeId: '<',\n        stTreeLevel: '<',\n        stTreeIndex: '<'\n      },\n      templateUrl: 'sttable/template/st-tree-toggle.html',\n      link: function(scope, element, attrs, ctrl) {\n        if (scope.toggleExists) {\n          element.bind('click', function($event) {\n            $event.stopPropagation();\n            ctrl.toggleRow(scope.stTreeId, scope.stTreeIndex);\n          });\n        }\n        scope.spacerClass = 'st-tree-spacer st-tree-spacer-level-' + scope.toggleLevel;\n      }\n    };\n  }]);\n\n})(angular);"],"sourceRoot":"/source/"}