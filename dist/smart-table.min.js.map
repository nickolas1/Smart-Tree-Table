{"version":3,"sources":["smart-table.min.js"],"names":["ng","undefined","module","run","$templateCache","put","constant","pagination","template","itemsByPage","displayedPages","search","delay","inputEvent","select","mode","selectedClass","sort","ascentClass","descentClass","descendingFirst","skipNatural","pipe","tree","nodesInitiallyOpen","controller","$scope","$parse","$filter","$attrs","stConfig","copyRefs","src","copy","concat","isTreeTable","treeifyData","updateSafeCopy","safeCopy","safeGetter","pipeAfterSafeCopy","ctrl","deepDelete","object","path","indexOf","partials","split","key","pop","parentPath","join","parentObject","Object","keys","length","data","findTreeAncestors","datum","idx","ancestors","i","treeLevel","push","$$treeId","ancestorSet","$$treeDescendents","$$treeAncestors","forEach","d","toString","Math","floor","random","$$treeIsExpanded","initiallyOpen","$$treeShown","nodeExpanded","k","checkDescendentVisibility","descIdx","shown","ancId","filtered","lastSelected","propertyName","stTable","displayGetter","displaySetter","assign","orderBy","filter","tableState","start","totalItemCount","this","Boolean","JSON","parse","stTreeInitOpen","toLowerCase","stSafeSrc","$watch","safeSrc","newValue","oldValue","sortBy","predicate","reverse","isFunction","functionName","name","input","predicateObject","prop","isString","trim","output","number","numberOfPages","ceil","slice","parseInt","row","rows","index","isSelected","getFilteredCollection","setFilterFunction","filterName","setSortFunction","sortFunctionName","preventPipeOnWatch","toggleRow","treeId","treeIdx","$apply","checkExpanded","directive","restrict","link","scope","element","attr","stSetFilter","stSetSort","$timeout","require","tableCtrl","promise","throttle","stDelay","event","stInputEvent","$observe","value","predicateExpression","stSearch","bind","evt","originalEvent","cancel","target","stSelectMode","addClass","removeClass","func","getter","isArray","stSort","sortDefault","classAscent","stClassAscent","classDescent","stClassDescent","stateClasses","stSkipNatural","stDescendingFirst","stSortDefault","$eval","stItemsByPage","stDisplayedPages","stPageChange","templateUrl","attrs","stTemplate","redraw","end","paginationState","prevPage","currentPage","max","abs","pages","numPages","newPage","selectPage","page","config","stPipe","pre","pipePromise","post","priority","compile","tElement","tAttrs","repeat","ngRepeat","rptVar","caretEl","angular","find","stTreeId","stTreeLevel","stTreeIndex","toggleExists","toggleIsExpanded","toggleLevel","spacerClass"],"mappings":"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","file":"smart-table.min.js","sourcesContent":["(function (ng, undefined){\n    'use strict';\n\nng.module('smart-table', []).run(['$templateCache', function ($templateCache) {\n    $templateCache.put('template/smart-table/pagination.html',\n        '<nav ng-if=\"numPages && pages.length >= 2\"><ul class=\"pagination\">' +\n        '<li ng-repeat=\"page in pages\" ng-class=\"{active: page==currentPage}\"><a href=\"javascript: void(0);\" ng-click=\"selectPage(page)\">{{page}}</a></li>' +\n        '</ul></nav>');\n        \n    $templateCache.put('sttable/template/st-tree-toggle.html',\n        '<span ng-class=\"spacerClass\"></span><i ng-if=\"toggleExists\" ng-class=\"toggleIsExpanded ? \\'fa fa-caret-down\\' : \\'fa fa-caret-right\\'\"></i>\\n' +\n        '');\n}]);\n\nng.module('smart-table')\n  .constant('stConfig', {\n    pagination: {\n      template: 'template/smart-table/pagination.html',\n      itemsByPage: 10,\n      displayedPages: 5\n    },\n    search: {\n      delay: 400, // ms\n      inputEvent: 'input'\n    },\n    select: {\n      mode: 'single',\n      selectedClass: 'st-selected'\n    },\n    sort: {\n      ascentClass: 'st-sort-ascent',\n      descentClass: 'st-sort-descent',\n      descendingFirst: false,\n      skipNatural: false,\n      delay:300\n    },\n    pipe: {\n      delay: 100 //ms\n    },\n    tree: {\n      nodesInitiallyOpen: true\n    }\n  });\n\nng.module('smart-table')\n  .controller('stTableController', ['$scope', '$parse', '$filter', '$attrs', 'stConfig', function StTableController ($scope, $parse, $filter, $attrs, stConfig) {\n    var propertyName = $attrs.stTable;\n    var displayGetter = $parse(propertyName);\n    var displaySetter = displayGetter.assign;\n    var safeGetter;\n    var orderBy = $filter('orderBy');\n    var filter = $filter('filter');\n    var safeCopy = copyRefs(displayGetter($scope));\n    var tableState = {\n      sort: {},\n      search: {},\n      pagination: {\n        start: 0,\n        totalItemCount: 0\n      }\n    };\n    var filtered;\n    var pipeAfterSafeCopy = true;\n    var ctrl = this;\n    var lastSelected;\n    var isTreeTable = 'stTreeTable' in $attrs;\n    var nodeExpanded;\n    //TODO allow passing an object with different levels open or closed?\n    var initiallyOpen = 'stTreeInitOpen' in $attrs ? Boolean(JSON.parse($attrs.stTreeInitOpen.toLowerCase())) : stConfig.tree.nodesInitiallyOpen;\n    \n    function copyRefs (src) {\n      var copy = src ? [].concat(src) : [];\n      if (isTreeTable) {\n        treeifyData(copy);\n      }\n      return copy;\n    }\n\n    function updateSafeCopy () {\n      safeCopy = copyRefs(safeGetter($scope));\n      if (pipeAfterSafeCopy === true) {\n        ctrl.pipe();\n      }\n    }\n\n    function deepDelete (object, path) {\n      if (path.indexOf('.') != -1) {\n        var partials = path.split('.');\n        var key = partials.pop();\n        var parentPath = partials.join('.');\n        var parentObject = $parse(parentPath)(object);\n        delete parentObject[key];\n        if (Object.keys(parentObject).length === 0) {\n          deepDelete(object, parentPath);\n        }\n      } else {\n        delete object[path];\n      }\n    }\n    \n    function treeifyData(data) {\n      data.forEach(function(d, i) {\n        if (!d.$$treeId) d.$$treeId = d.treeLevel.toString() + i + Math.floor(Math.random()*10000);\n      });\n      var ancestorSet = {};\n      data.forEach(function(d, i) {\n        if (d.treeLevel > 0) {\n          d.$$treeDescendents = [];\n          d.$$treeIsExpanded = initiallyOpen;\n        }\n        d.$$treeAncestors = findTreeAncestors(d, i);\n        d.$$treeShown = d.treeLevel > 0;\n      });\n      \n      nodeExpanded = {};\n      Object.keys(ancestorSet).forEach(function(k) {\n        nodeExpanded[k] = initiallyOpen;\n      });\n      \n      data.forEach(function(d, i) {\n        if (d.treeLevel > 0) checkDescendentVisibility(data, i);\n      });\n      \n      function findTreeAncestors(datum, idx) {\n        var ancestors = [];\n        for (var i = idx; i >= 0; i--) {\n          if (data[i].treeLevel > datum.treeLevel) {\n            ancestors.push(data[i].$$treeId);\n            ancestorSet[data[i].$$treeId] = true;\n            data[i].$$treeDescendents.push(idx);\n            return ancestors.concat(data[i].$$treeAncestors);\n          }\n        }\n        return ancestors;\n      }\n    }\n    \n    function checkDescendentVisibility(data, idx) {\n      data[idx].$$treeDescendents.forEach(function(descIdx) {\n        var shown = true;\n        data[descIdx].$$treeAncestors.forEach(function(ancId) {\n          shown = shown && nodeExpanded[ancId];\n        });\n        data[descIdx].$$treeShown = shown;\n        if (data[descIdx].$$treeDescendents) {\n          checkDescendentVisibility(data, descIdx);\n        }\n      });\n    }\n\n    if ($attrs.stSafeSrc) {\n      safeGetter = $parse($attrs.stSafeSrc);\n      $scope.$watch(function () {\n        var safeSrc = safeGetter($scope);\n        return safeSrc && safeSrc.length ? safeSrc[0] : undefined;\n      }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n          updateSafeCopy();\n        }\n      });\n      $scope.$watch(function () {\n        var safeSrc = safeGetter($scope);\n        return safeSrc ? safeSrc.length : 0;\n      }, function (newValue, oldValue) {\n        if (newValue !== safeCopy.length) {\n          updateSafeCopy();\n        }\n      });\n      $scope.$watch(function () {\n        return safeGetter($scope);\n      }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n          tableState.pagination.start = 0;\n          updateSafeCopy();\n        }\n      });\n    }\n\n    /**\n     * sort the rows\n     * @param {Function | String} predicate - function or string which will be used as predicate for the sorting\n     * @param [reverse] - if you want to reverse the order\n     */\n    this.sortBy = function sortBy (predicate, reverse) {\n      tableState.sort.predicate = predicate;\n      tableState.sort.reverse = reverse === true;\n\n      if (ng.isFunction(predicate)) {\n        tableState.sort.functionName = predicate.name;\n      } else {\n        delete tableState.sort.functionName;\n      }\n\n      tableState.pagination.start = 0;\n      return this.pipe();\n    };\n\n    /**\n     * search matching rows\n     * @param {String} input - the input string\n     * @param {String} [predicate] - the property name against you want to check the match, otherwise it will search on all properties\n     */\n    this.search = function search (input, predicate) {\n      var predicateObject = tableState.search.predicateObject || {};\n      var prop = predicate ? predicate : '$';\n\n      input = ng.isString(input) ? input.trim() : input;\n      $parse(prop).assign(predicateObject, input);\n      // to avoid to filter out null value\n      if (!input) {\n        deepDelete(predicateObject, prop);\n      }\n      tableState.search.predicateObject = predicateObject;\n      tableState.pagination.start = 0;\n      return this.pipe();\n    };\n\n    /**\n     * this will chain the operations of sorting and filtering based on the current table state (sort options, filtering, ect)\n     */\n    this.pipe = function pipe () {\n      var pagination = tableState.pagination;\n      var output;\n      filtered = tableState.search.predicateObject ? filter(safeCopy, tableState.search.predicateObject) : safeCopy;\n      if (tableState.sort.predicate) {\n        filtered = orderBy(filtered, tableState.sort.predicate, tableState.sort.reverse);\n      }\n      pagination.totalItemCount = filtered.length;\n      if (pagination.number !== undefined) {\n        pagination.numberOfPages = filtered.length > 0 ? Math.ceil(filtered.length / pagination.number) : 1;\n        pagination.start = pagination.start >= filtered.length ? (pagination.numberOfPages - 1) * pagination.number : pagination.start;\n        output = filtered.slice(pagination.start, pagination.start + parseInt(pagination.number));\n      }\n      displaySetter($scope, output || filtered);\n    };\n\n    /**\n     * select a dataRow (it will add the attribute isSelected to the row object)\n     * @param {Object} row - the row to select\n     * @param {String} [mode] - \"single\" or \"multiple\" (multiple by default)\n     */\n    this.select = function select (row, mode) {\n      var rows = copyRefs(displayGetter($scope));\n      var index = rows.indexOf(row);\n      if (index !== -1) {\n        if (mode === 'single') {\n          row.isSelected = row.isSelected !== true;\n          if (lastSelected) {\n            lastSelected.isSelected = false;\n          }\n          lastSelected = row.isSelected === true ? row : undefined;\n        } else {\n          rows[index].isSelected = !rows[index].isSelected;\n        }\n      }\n    };\n\n    /**\n     * take a slice of the current sorted/filtered collection (pagination)\n     *\n     * @param {Number} start - start index of the slice\n     * @param {Number} number - the number of item in the slice\n     */\n    this.slice = function splice (start, number) {\n      tableState.pagination.start = start;\n      tableState.pagination.number = number;\n      return this.pipe();\n    };\n\n    /**\n     * return the current state of the table\n     * @returns {{sort: {}, search: {}, pagination: {start: number}}}\n     */\n    this.tableState = function getTableState () {\n      return tableState;\n    };\n\n    this.getFilteredCollection = function getFilteredCollection () {\n      return filtered || safeCopy;\n    };\n\n    /**\n     * Use a different filter function than the angular FilterFilter\n     * @param filterName the name under which the custom filter is registered\n     */\n    this.setFilterFunction = function setFilterFunction (filterName) {\n      filter = $filter(filterName);\n    };\n\n    /**\n     * Use a different function than the angular orderBy\n     * @param sortFunctionName the name under which the custom order function is registered\n     */\n    this.setSortFunction = function setSortFunction (sortFunctionName) {\n      orderBy = $filter(sortFunctionName);\n    };\n\n    /**\n     * Usually when the safe copy is updated the pipe function is called.\n     * Calling this method will prevent it, which is something required when using a custom pipe function\n     */\n    this.preventPipeOnWatch = function preventPipe () {\n      pipeAfterSafeCopy = false;\n    };\n    \n    /**\n     * Open or close a tree level.\n     * @param treeId the unique id of the tree table row being toggled\n     * @param treeIdx the index of the row in the table\n     */\n    this.toggleRow = function toggleRow (treeId, treeIdx) {\n      nodeExpanded[treeId] = !nodeExpanded[treeId];\n      safeCopy[treeIdx].$$treeIsExpanded = nodeExpanded[treeId];\n      $scope.$apply(function() {\n        checkDescendentVisibility(safeCopy, treeIdx);\n      });\n    };\n    \n    /**\n     * Check if a tree level is open or closed\n     * @param treeId the unique id of the tree table row being checked\n     */\n    this.checkExpanded = function checkExpanded (treeId) {\n      return nodeExpanded[treeId];\n    };\n  }])\n  .directive('stTable', function () {\n    return {\n      restrict: 'A',\n      controller: 'stTableController',\n      link: function (scope, element, attr, ctrl) {\n\n        if (attr.stSetFilter) {\n          ctrl.setFilterFunction(attr.stSetFilter);\n        }\n\n        if (attr.stSetSort) {\n          ctrl.setSortFunction(attr.stSetSort);\n        }\n      }\n    };\n  });\n\nng.module('smart-table')\n  .directive('stSearch', ['stConfig', '$timeout','$parse', function (stConfig, $timeout, $parse) {\n    return {\n      require: '^stTable',\n      link: function (scope, element, attr, ctrl) {\n        var tableCtrl = ctrl;\n        var promise = null;\n        var throttle = attr.stDelay || stConfig.search.delay;\n        var event = attr.stInputEvent || stConfig.search.inputEvent;\n\n        attr.$observe('stSearch', function (newValue, oldValue) {\n          var input = element[0].value;\n          if (newValue !== oldValue && input) {\n            ctrl.tableState().search = {};\n            tableCtrl.search(input, newValue);\n          }\n        });\n\n        //table state -> view\n        scope.$watch(function () {\n          return ctrl.tableState().search;\n        }, function (newValue, oldValue) {\n          var predicateExpression = attr.stSearch || '$';\n          if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {\n            element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';\n          }\n        }, true);\n\n        // view -> table state\n        element.bind(event, function (evt) {\n          evt = evt.originalEvent || evt;\n          if (promise !== null) {\n            $timeout.cancel(promise);\n          }\n\n          promise = $timeout(function () {\n            tableCtrl.search(evt.target.value, attr.stSearch || '');\n            promise = null;\n          }, throttle);\n        });\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stSelectRow', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      scope: {\n        row: '=stSelectRow'\n      },\n      link: function (scope, element, attr, ctrl) {\n        var mode = attr.stSelectMode || stConfig.select.mode;\n        element.bind('click', function () {\n          scope.$apply(function () {\n            ctrl.select(scope.row, mode);\n          });\n        });\n\n        scope.$watch('row.isSelected', function (newValue) {\n          if (newValue === true) {\n            element.addClass(stConfig.select.selectedClass);\n          } else {\n            element.removeClass(stConfig.select.selectedClass);\n          }\n        });\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stSort', ['stConfig', '$parse', '$timeout', function (stConfig, $parse, $timeout) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      link: function (scope, element, attr, ctrl) {\n\n        var predicate = attr.stSort;\n        var getter = $parse(predicate);\n        var index = 0;\n        var classAscent = attr.stClassAscent || stConfig.sort.ascentClass;\n        var classDescent = attr.stClassDescent || stConfig.sort.descentClass;\n        var stateClasses = [classAscent, classDescent];\n        var sortDefault;\n        var skipNatural = attr.stSkipNatural !== undefined ? attr.stSkipNatural : stConfig.sort.skipNatural;\n        var descendingFirst = attr.stDescendingFirst !== undefined ? attr.stDescendingFirst : stConfig.sort.descendingFirst;\n        var promise = null;\n        var throttle = attr.stDelay || stConfig.sort.delay;\n\n        if (attr.stSortDefault) {\n          sortDefault = scope.$eval(attr.stSortDefault) !== undefined ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;\n        }\n\n        //view --> table state\n        function sort () {\n          if (descendingFirst) {\n            index = index === 0 ? 2 : index - 1;\n          } else {\n            index++;\n          }\n\n          var func;\n          predicate = ng.isFunction(getter(scope)) || ng.isArray(getter(scope)) ? getter(scope) : attr.stSort;\n          if (index % 3 === 0 && !!skipNatural !== true) {\n            //manual reset\n            index = 0;\n            ctrl.tableState().sort = {};\n            ctrl.tableState().pagination.start = 0;\n            func = ctrl.pipe.bind(ctrl);\n          } else {\n            func = ctrl.sortBy.bind(ctrl, predicate, index % 2 === 0);\n          }\n          if (promise !== null) {\n            $timeout.cancel(promise);\n          }\n          if (throttle < 0) {\n            func();\n          } else {\n            promise = $timeout(func, throttle);\n          }\n        }\n\n        element.bind('click', function sortClick () {\n          if (predicate) {\n            scope.$apply(sort);\n          }\n        });\n\n        if (sortDefault) {\n          index = sortDefault === 'reverse' ? 1 : 0;\n          sort();\n        }\n\n        //table state --> view\n        scope.$watch(function () {\n          return ctrl.tableState().sort;\n        }, function (newValue) {\n          if (newValue.predicate !== predicate) {\n            index = 0;\n            element\n              .removeClass(classAscent)\n              .removeClass(classDescent);\n          } else {\n            index = newValue.reverse === true ? 2 : 1;\n            element\n              .removeClass(stateClasses[index % 2])\n              .addClass(stateClasses[index - 1]);\n          }\n        }, true);\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stPagination', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'EA',\n      require: '^stTable',\n      scope: {\n        stItemsByPage: '=?',\n        stDisplayedPages: '=?',\n        stPageChange: '&'\n      },\n      templateUrl: function (element, attrs) {\n        if (attrs.stTemplate) {\n          return attrs.stTemplate;\n        }\n        return stConfig.pagination.template;\n      },\n      link: function (scope, element, attrs, ctrl) {\n\n        scope.stItemsByPage = scope.stItemsByPage ? +(scope.stItemsByPage) : stConfig.pagination.itemsByPage;\n        scope.stDisplayedPages = scope.stDisplayedPages ? +(scope.stDisplayedPages) : stConfig.pagination.displayedPages;\n\n        scope.currentPage = 1;\n        scope.pages = [];\n\n        function redraw () {\n          var paginationState = ctrl.tableState().pagination;\n          var start = 1;\n          var end;\n          var i;\n          var prevPage = scope.currentPage;\n          scope.totalItemCount = paginationState.totalItemCount;\n          scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;\n\n          start = Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));\n          end = start + scope.stDisplayedPages;\n\n          if (end > paginationState.numberOfPages) {\n            end = paginationState.numberOfPages + 1;\n            start = Math.max(1, end - scope.stDisplayedPages);\n          }\n\n          scope.pages = [];\n          scope.numPages = paginationState.numberOfPages;\n\n          for (i = start; i < end; i++) {\n            scope.pages.push(i);\n          }\n\n          if (prevPage !== scope.currentPage) {\n            scope.stPageChange({newPage: scope.currentPage});\n          }\n        }\n\n        //table state --> view\n        scope.$watch(function () {\n          return ctrl.tableState().pagination;\n        }, redraw, true);\n\n        //scope --> table state  (--> view)\n        scope.$watch('stItemsByPage', function (newValue, oldValue) {\n          if (newValue !== oldValue) {\n            scope.selectPage(1);\n          }\n        });\n\n        scope.$watch('stDisplayedPages', redraw);\n\n        //view -> table state\n        scope.selectPage = function (page) {\n          if (page > 0 && page <= scope.numPages) {\n            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);\n          }\n        };\n\n        if (!ctrl.tableState().pagination.number) {\n          ctrl.slice(0, scope.stItemsByPage);\n        }\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stPipe', ['stConfig', '$timeout', function (config, $timeout) {\n    return {\n      require: 'stTable',\n      scope: {\n        stPipe: '='\n      },\n      link: {\n\n        pre: function (scope, element, attrs, ctrl) {\n\n          var pipePromise = null;\n\n          if (ng.isFunction(scope.stPipe)) {\n            ctrl.preventPipeOnWatch();\n            ctrl.pipe = function () {\n\n              if (pipePromise !== null) {\n                $timeout.cancel(pipePromise)\n              }\n\n              pipePromise = $timeout(function () {\n                scope.stPipe(ctrl.tableState(), ctrl);\n              }, config.pipe.delay);\n\n              return pipePromise;\n            }\n          }\n        },\n\n        post: function (scope, element, attrs, ctrl) {\n          ctrl.pipe();\n        }\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stTreeRow', ['stConfig', function (stConfig) {\n    return {\n      restrict: 'A',\n      require: '^stTable',\n      priority: 1001, // needs to compile before ng-repeat at priority 1000\n      compile: function (tElement, tAttrs) {\n        // add tree attributes\n        var repeat = tAttrs.ngRepeat;\n        var rptVar = repeat.split(' in ')[0];\n        tElement.attr('ng-repeat', repeat + ' track by ' + rptVar + '.$$treeId');\n        tElement.attr('st-tree-row-internal', '');\n        tElement.attr('st-tree-id', rptVar + '.$$treeId');\n        tElement.attr('st-tree-level', rptVar + '.treeLevel');\n        tElement.attr('st-tree-index', '$index');\n        tElement.attr('ng-if', rptVar + '.$$treeShown');\n        tElement.attr('ng-class', '\"st-tree-row-\"+' + rptVar + '.treeLevel');\n            \n        var caretEl = angular.element(tElement.find('td')[0]).find('st-tree-caret');\n        caretEl.attr('toggle-exists', rptVar + '.treeLevel > 0');\n        caretEl.attr('toggle-is-expanded', rptVar + '.$$treeIsExpanded');\n        caretEl.attr('toggle-level', rptVar + '.treeLevel');\n      }\n    };\n  }]);\n\nng.module('smart-table')\n  .directive('stTreeRowInternal', ['stConfig', function (stConfig) {\n    return {\n      require: '^^stTable',\n      scope: {\n        stTreeId: '<',\n        stTreeLevel: '<',\n        stTreeIndex: '<'\n      },\n      link: function(scope, element, attrs, tableCtrl) {\n        if (scope.stTreeLevel > 0) {\n          element.bind('click', function() {\n            tableCtrl.toggleRow(scope.stTreeId, scope.stTreeIndex);\n          });\n        }\n      }\n    };\n  }]);\n  \nng.module('smart-table')\n  .directive('stTreeCaret', ['stConfig', function (stConfig) {\n    return {\n      scope: {\n        toggleExists: '<',\n        toggleIsExpanded: '<',\n        toggleLevel: '<'\n      },\n      templateUrl: 'sttable/template/st-tree-toggle.html',\n      link: function(scope) {\n        scope.spacerClass = 'st-tree-spacer st-tree-spacer-level-' + scope.toggleLevel;\n      }\n    };\n  }]);\n\n})(angular);"],"sourceRoot":"/source/"}